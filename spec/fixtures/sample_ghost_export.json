{"db":[{"meta":null,"data":{"posts":[{"id":"638ad8bb7878f600319b90c8","uuid":"3a708597-dff8-43b6-9446-92e5907f25fe","title":"About this site","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://ghost.org\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"The Engineering Org is an independent publication launched in December 2022 by Siddharth Sharma. If you subscribe today, you'll get full access to the website as well as email newsletters about new content when it's available. Your subscription makes this site possible, and allows The Engineering Org to continue to exist. Thank you!\"]]],[1,\"h3\",[[0,[],0,\"Access all areas\"]]],[1,\"p\",[[0,[],0,\"By signing up, you'll get access to the full archive of everything that's been published before and everything that's still to come. Your very own private library.\"]]],[1,\"h3\",[[0,[],0,\"Fresh content, delivered\"]]],[1,\"p\",[[0,[],0,\"Stay up to date with new content sent straight to your inbox! No more worrying about whether you missed something because of a pesky algorithm or news feed.\"]]],[1,\"h3\",[[0,[],0,\"Meet people like you\"]]],[1,\"p\",[[0,[],0,\"Join a community of other subscribers who share the same interests.\"]]],[10,0],[1,\"h3\",[[0,[],0,\"Start your own thing\"]]],[1,\"p\",[[0,[],0,\"Enjoying the experience? Get started for free and set up your very own subscription business using \"],[0,[0],1,\"Ghost\"],[0,[],0,\", the same platform that powers this website.\"]]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"\u003cp\u003eThe Engineering Org is an independent publication launched in December 2022 by Siddharth Sharma. If you subscribe today, you'll get full access to the website as well as email newsletters about new content when it's available. Your subscription makes this site possible, and allows The Engineering Org to continue to exist. Thank you!\u003c/p\u003e\u003ch3 id=\"access-all-areas\"\u003eAccess all areas\u003c/h3\u003e\u003cp\u003eBy signing up, you'll get access to the full archive of everything that's been published before and everything that's still to come. Your very own private library.\u003c/p\u003e\u003ch3 id=\"fresh-content-delivered\"\u003eFresh content, delivered\u003c/h3\u003e\u003cp\u003eStay up to date with new content sent straight to your inbox! No more worrying about whether you missed something because of a pesky algorithm or news feed.\u003c/p\u003e\u003ch3 id=\"meet-people-like-you\"\u003eMeet people like you\u003c/h3\u003e\u003cp\u003eJoin a community of other subscribers who share the same interests.\u003c/p\u003e\u003chr\u003e\u003ch3 id=\"start-your-own-thing\"\u003eStart your own thing\u003c/h3\u003e\u003cp\u003eEnjoying the experience? Get started for free and set up your very own subscription business using \u003ca href=\"https://ghost.org\"\u003eGhost\u003c/a\u003e, the same platform that powers this website.\u003c/p\u003e","comment_id":"638ad8bb7878f600319b90c8","plaintext":"The Engineering Org is an independent publication launched in December 2022 by Siddharth Sharma. If you subscribe today, you'll get full access to the website as well as email newsletters about new content when it's available. Your subscription makes this site possible, and allows The Engineering Org to continue to exist. Thank you!\n\n\nAccess all areas\n\nBy signing up, you'll get access to the full archive of everything that's been published before and everything that's still to come. Your very own private library.\n\n\nFresh content, delivered\n\nStay up to date with new content sent straight to your inbox! No more worrying about whether you missed something because of a pesky algorithm or news feed.\n\n\nMeet people like you\n\nJoin a community of other subscribers who share the same interests.\n\n\nStart your own thing\n\nEnjoying the experience? Get started for free and set up your very own subscription business using Ghost, the same platform that powers this website.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-12-03T05:03:55.000Z","updated_at":"2022-12-03T05:04:06.000Z","published_at":"2022-12-03T05:03:56.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"638b9a0897ce15003df11479","uuid":"2e2ee604-db03-41e2-bbbc-11e2df476edb","title":"narratives","slug":"narratives","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://www.britannica.com/topic/a-priori-knowledge\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"The human brain is truly a remarkable thing. Unique amongst all the things in this Universe, it is the only thing we know which does cognition - the assigning of meaning to things. But it cannot assign meaning to things by themselves. It has to see those things in relation to something else. It forms its ideas about a cat, for example, from its idea about animals, and ideas about animals from its idea about living things and so on until we get to the much debated concept of \"],[0,[0,1],1,\"a priori\"],[0,[],1,\" \"],[0,[],0,\"knowledge — ie knowledge which comes from before experience. There are only some innate concepts in the human mind, concepts such as space and time and mathematical knowledge, but pretty much everything we know is \"],[0,[0],1,\"a posteriori \"],[0,[],0,\"knowledge and can only be known through its relationship with other things and how these are known by us through experience.\"]]],[1,\"p\",[[0,[],0,\"And one way that the human mind grasps these relationships is through the device of narrative — is stories. No matter which culture we look at, any culture that looked up at the heavens and saw a night sky full of stars started to tell stories about them. They took those randomly arranged blobs of burning cosmic matter and started to spin elaborate stories of who they were, what their roles were, how they were related to each other and spun elaborate cosmo— and mythologies. Narratives are, it seems, \"],[0,[0],1,\"a priori\"],[0,[],0,\" knowledge.\"]]],[1,\"p\",[[0,[],0,\"A lot of the success of Homo Sapiens can be attributed to this capability. When Homo Sapiens reached Europe millenia ago, they found there a much hardier breed of proto-human, the Neanderthals, who were stronger and better adapted to the cold. Going by these traits, the Neanderthals should have prevailed over Homo Sapiens. But Sapiens had a secret weapon. They could tell stories. And because they could tell stories they could coordinate in larger groups and eventually killed of all the Neanderthal bands.\"]]],[1,\"p\",[[0,[],0,\"Stories are not only innate, they are also powerful.\"]]],[1,\"p\",[[0,[],0,\"And you, dear reader, are essentially unconsciously living out the stories you have received through your formative years, and not just the stories from the Ramayana and Mahabharata — you are living out stories about yourself, whether you are worthy, a good human, your ideas about morality, all these stories are unconsciously driving you and your poor rational mind is left to pick up the pieces and try and build yet another story out of them that satisfactorily explains your life while still having you be the hero of it.\"]]],[1,\"p\",[[0,[],0,\"Why am I spending so much time telling you all this? Because, just in case you skipped a few paragraphs, \"],[0,[2],1,\"stories are innate to humans and powerful drivers of human behaviour.\"]]],[1,\"p\",[[0,[],0,\"Not just that — \"],[0,[2],1,\"your organisation is full of stories\"],[0,[],0,\". Every human inside it is relating to the organisation in terms of the story they’re telling themselves about their relationship with the org. And they are receiving stories from and about other people in the organisation at the same time. It is a complex web of narratives but at the top level there are a few dominant narratives that are shaping the DNA of the organisation — how it takes decisions, whether it is an ethical org or not, how it treats women and minorities and those without power, how it plans, how it assigns praise and blame, how urgently it acts — all these things are being driven by this organisational story. And all those things, dear reader, are political in nature.\"]]],[1,\"p\",[[0,[],0,\"The stories that the org tells itself about itself, about teams inside it and about people inside those teams are powerful influences on decision-making. And therefore, stories give you a lot of leverage when it comes to affecting decision making. This is often why CEOs have to be replaced before there can be meaningful change. A change of CEO allows for a change of narrative and therefore a change of everything.\"]]],[1,\"p\",[[0,[],0,\"Stories provide immense leverage, but they are like oil tankers. Once they gain momentum they are dastardly difficult to steer. Try and steer it too hard and it might just capsize. Even so, at leadership levels, an ability to change the story is one of the most powerful tools in your arsenal. Organisational ‘culture’ itself can just be seen as the sum total of stories that the org tells.\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"\u003cp\u003eThe human brain is truly a remarkable thing. Unique amongst all the things in this Universe, it is the only thing we know which does cognition - the assigning of meaning to things. But it cannot assign meaning to things by themselves. It has to see those things in relation to something else. It forms its ideas about a cat, for example, from its idea about animals, and ideas about animals from its idea about living things and so on until we get to the much debated concept of \u003cem\u003e\u003ca href=\"https://www.britannica.com/topic/a-priori-knowledge\"\u003ea priori\u003c/a\u003e \u003c/em\u003eknowledge — ie knowledge which comes from before experience. There are only some innate concepts in the human mind, concepts such as space and time and mathematical knowledge, but pretty much everything we know is \u003cem\u003ea posteriori \u003c/em\u003eknowledge and can only be known through its relationship with other things and how these are known by us through experience.\u003c/p\u003e\u003cp\u003eAnd one way that the human mind grasps these relationships is through the device of narrative — is stories. No matter which culture we look at, any culture that looked up at the heavens and saw a night sky full of stars started to tell stories about them. They took those randomly arranged blobs of burning cosmic matter and started to spin elaborate stories of who they were, what their roles were, how they were related to each other and spun elaborate cosmo— and mythologies. Narratives are, it seems, \u003cem\u003ea priori\u003c/em\u003e knowledge.\u003c/p\u003e\u003cp\u003eA lot of the success of Homo Sapiens can be attributed to this capability. When Homo Sapiens reached Europe millenia ago, they found there a much hardier breed of proto-human, the Neanderthals, who were stronger and better adapted to the cold. Going by these traits, the Neanderthals should have prevailed over Homo Sapiens. But Sapiens had a secret weapon. They could tell stories. And because they could tell stories they could coordinate in larger groups and eventually killed of all the Neanderthal bands.\u003c/p\u003e\u003cp\u003eStories are not only innate, they are also powerful.\u003c/p\u003e\u003cp\u003eAnd you, dear reader, are essentially unconsciously living out the stories you have received through your formative years, and not just the stories from the Ramayana and Mahabharata — you are living out stories about yourself, whether you are worthy, a good human, your ideas about morality, all these stories are unconsciously driving you and your poor rational mind is left to pick up the pieces and try and build yet another story out of them that satisfactorily explains your life while still having you be the hero of it.\u003c/p\u003e\u003cp\u003eWhy am I spending so much time telling you all this? Because, just in case you skipped a few paragraphs, \u003cstrong\u003estories are innate to humans and powerful drivers of human behaviour.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eNot just that — \u003cstrong\u003eyour organisation is full of stories\u003c/strong\u003e. Every human inside it is relating to the organisation in terms of the story they’re telling themselves about their relationship with the org. And they are receiving stories from and about other people in the organisation at the same time. It is a complex web of narratives but at the top level there are a few dominant narratives that are shaping the DNA of the organisation — how it takes decisions, whether it is an ethical org or not, how it treats women and minorities and those without power, how it plans, how it assigns praise and blame, how urgently it acts — all these things are being driven by this organisational story. And all those things, dear reader, are political in nature.\u003c/p\u003e\u003cp\u003eThe stories that the org tells itself about itself, about teams inside it and about people inside those teams are powerful influences on decision-making. And therefore, stories give you a lot of leverage when it comes to affecting decision making. This is often why CEOs have to be replaced before there can be meaningful change. A change of CEO allows for a change of narrative and therefore a change of everything.\u003c/p\u003e\u003cp\u003eStories provide immense leverage, but they are like oil tankers. Once they gain momentum they are dastardly difficult to steer. Try and steer it too hard and it might just capsize. Even so, at leadership levels, an ability to change the story is one of the most powerful tools in your arsenal. Organisational ‘culture’ itself can just be seen as the sum total of stories that the org tells.\u003c/p\u003e","comment_id":"638b65ed07bd7780dce71b34","plaintext":"The human brain is truly a remarkable thing. Unique amongst all the things in this Universe, it is the only thing we know which does cognition - the assigning of meaning to things. But it cannot assign meaning to things by themselves. It has to see those things in relation to something else. It forms its ideas about a cat, for example, from its idea about animals, and ideas about animals from its idea about living things and so on until we get to the much debated concept of a priori knowledge — ie knowledge which comes from before experience. There are only some innate concepts in the human mind, concepts such as space and time and mathematical knowledge, but pretty much everything we know is a posteriori knowledge and can only be known through its relationship with other things and how these are known by us through experience.\n\nAnd one way that the human mind grasps these relationships is through the device of narrative — is stories. No matter which culture we look at, any culture that looked up at the heavens and saw a night sky full of stars started to tell stories about them. They took those randomly arranged blobs of burning cosmic matter and started to spin elaborate stories of who they were, what their roles were, how they were related to each other and spun elaborate cosmo— and mythologies. Narratives are, it seems, a priori knowledge.\n\nA lot of the success of Homo Sapiens can be attributed to this capability. When Homo Sapiens reached Europe millenia ago, they found there a much hardier breed of proto-human, the Neanderthals, who were stronger and better adapted to the cold. Going by these traits, the Neanderthals should have prevailed over Homo Sapiens. But Sapiens had a secret weapon. They could tell stories. And because they could tell stories they could coordinate in larger groups and eventually killed of all the Neanderthal bands.\n\nStories are not only innate, they are also powerful.\n\nAnd you, dear reader, are essentially unconsciously living out the stories you have received through your formative years, and not just the stories from the Ramayana and Mahabharata — you are living out stories about yourself, whether you are worthy, a good human, your ideas about morality, all these stories are unconsciously driving you and your poor rational mind is left to pick up the pieces and try and build yet another story out of them that satisfactorily explains your life while still having you be the hero of it.\n\nWhy am I spending so much time telling you all this? Because, just in case you skipped a few paragraphs, stories are innate to humans and powerful drivers of human behaviour.\n\nNot just that — your organisation is full of stories. Every human inside it is relating to the organisation in terms of the story they’re telling themselves about their relationship with the org. And they are receiving stories from and about other people in the organisation at the same time. It is a complex web of narratives but at the top level there are a few dominant narratives that are shaping the DNA of the organisation — how it takes decisions, whether it is an ethical org or not, how it treats women and minorities and those without power, how it plans, how it assigns praise and blame, how urgently it acts — all these things are being driven by this organisational story. And all those things, dear reader, are political in nature.\n\nThe stories that the org tells itself about itself, about teams inside it and about people inside those teams are powerful influences on decision-making. And therefore, stories give you a lot of leverage when it comes to affecting decision making. This is often why CEOs have to be replaced before there can be meaningful change. A change of CEO allows for a change of narrative and therefore a change of everything.\n\nStories provide immense leverage, but they are like oil tankers. Once they gain momentum they are dastardly difficult to steer. Try and steer it too hard and it might just capsize. Even so, at leadership levels, an ability to change the story is one of the most powerful tools in your arsenal. Organisational ‘culture’ itself can just be seen as the sum total of stories that the org tells.","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"paid","email_recipient_filter":"all","created_at":"2022-12-03T15:04:57.000Z","updated_at":"2022-12-03T15:04:57.000Z","published_at":"2022-12-03T15:04:57.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"638b9a0897ce15003df1147a","uuid":"0f2d6b83-849a-4df8-b795-5cc5357e1947","title":"PMs are from Saturn, EMs are from Jupiter","slug":"pms-are-from-saturn-ems-are-from","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"paywall\",{}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/public/images/2b085361-e157-4ab2-b29e-71d0da97f898_400x420.jpg\",\"alt\":\"Meme: \\\"I'm not crying, You're crying!\\\" - All Templates ...\",\"title\":\"Meme: \\\"I'm not crying, You're crying!\\\" - All Templates ...\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"s\"],[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Happy product engineering orgs are all alike. Every unhappy product engineering org is unhappy in its own way.\"]]],[1,\"p\",[[0,[],0,\"(Apologies to Leo Tolstoy)\"]]],[1,\"blockquote\",[[0,[0],1,\"This is an early access article for Founder Members. It will be made available to other membership tiers over time. Enjoy your early access and let me know what you think about this article in the comments below.\"],[1,[],0,0],[1,[],0,1],[0,[],0,\"As promised, expanding access to all paid subscribers. Enjoy your early access. The article will be made free for all in a couple of weeks. If you can’t subscribe, all you need to do is wait a bit. If you can, I’d appreciate all the support I can get for my writing.\"],[1,[],0,2],[1,[],0,3],[0,[],0,\"Cheers\"]]],[1,\"p\",[[0,[],0,\"Ah! Product Engineering — the volatile marriage of hackers and hustlers, the awkward cohabitation of Jovians and Saturnians, the Odd Couple of the professional world — many are your woes, colossal your misunderstandings, how unhappy your marriage!\"]]],[1,\"p\",[[0,[],0,\"But it needn’t be this way. Come, let me tell you a story.\"]]],[10,0],[1,\"p\",[[0,[],0,\"We set the scene in a mid-sized product engineering org at a company whose product is quite scaled up. Now in a scaled up product it’s very hard to unlock new opportunities for growth and so the Product team would spend endless hours in the weeds of the data searching for an opportunity to extract just a little bit more value from their users. This naturally involved a lot of meetings with leadership and leaving each meeting with the exhortation to search more, to search harder and also to search in a different place.\"]]],[1,\"p\",[[0,[],0,\"In other words, the product team was very busy.\"]]],[1,\"p\",[[0,[],0,\"And in order to keep the engineers busy, the product team would bring to the backlog their most promising ideas — tweak this copy and we’ll see a 2% increase in conversions. Add this new type of discount code for a 1% hike in revenue. Add a hidden div with a photo of Laxmi, the Goddess of Wealth, to bless our payments pages… none of it moved any numbers.\"]]],[1,\"p\",[[0,[],0,\"All this time the Engineering Manager had been suggesting that the team might be better utilised paying off some technical debt. The payment pages were slow and the team had identified several bottlenecks that could improve the performance. Also, technical debt meant that the experience of working on these pages was very painful. Perhaps they might consider taking a sprint to rewrite parts of it in React?\"]]],[1,\"p\",[[0,[],0,\"A whole sprint?, asked the terrified PM. But, but that means that all these projects will be late. Request denied.\"]]],[1,\"p\",[[0,[],0,\"And so it went. The engineers would slave over one feature after another and nothing seemed to work. Along the way, two things happened concurrently. The EM started to run out of patience. And the PM started to run out of ideas.\"]]],[1,\"p\",[[0,[],0,\"At one sprint planning meeting the breaking was reached and crossed, left in the rear mirror. The EM finally put her foot down and said ‘enough is enough! we’re not working on your shitty ideas any more. The devs have suffered enough. Please go away for one sprint.’, The PM considered the steely determination on the EMs face, looked at the items on the backlog and seeing that he was now at the stage of seeking Divine Intervention, magnanimously agreed.\"]]],[1,\"p\",[[0,[],0,\"But the magnanimity was a mere show. Inside, the PM didn’t feel it. A whole sprint wasted on devs wanting to scratch their own itch instead of ‘doing what’s right for the business’! Oh, the waste! The sheer waste!\"]]],[1,\"p\",[[0,[],0,\"For the whole sprint the PM paced up and down, agitated, searching furiously for a way to save his job — because that’s how bad it had gotten. It was only with a great effort of the will that he restrained himself from popping in to the team every few hours to ask how it’s going. Besides, the EM was standing guard with a grim and determined look on her face. The PM inferred correctly that she was not a woman who would be putting up with any interruptions.\"]]],[1,\"p\",[[0,[],0,\"To distract himself, he started a long running TT match with the CTO.\"]]],[1,\"p\",[[0,[],0,\"The smiles on the faces of the team as they worked only served to increase the PMs irritation. ‘These  nerds only care about one thing’, he fumed as he stalked off to the Cafe for another game of TT.\"]]],[1,\"p\",[[0,[],0,\"A week passes. Only another week to go to the end of the sprint. PM wakes up on Wednesday morning to a release notification. The new payment pages have rolled out to 10% of users. The data starts to trickle in. It’s obvious that nothing is broken, but there’s so little data that one can’t really infer anything more. The team rolls out to 50%.\"]]],[1,\"p\",[[0,[],0,\"PM wakes up on Thursday morning to find a healthy bump in revenue. Checking the results of the A/B he finds the new payment pages converting 30% better than the old ones. There must be some mistake! he says. This cannot be.\"]]],[1,\"p\",[[0,[],0,\"By the time Friday evening rolls around it is confirmed. The team is high-fiving and whooping it up in the office. The PM, feeling mighty sheepish, walks up to the team, swallows his pride and gives them all a heartfelt congratulations. The owner of the company walks by and says ‘I saw the reports this morning. Good job, PM’.\"]]],[1,\"p\",[[0,[],0,\"‘Thanks boss’, says the PM and then stops. And he feels something relax in his heart and he says ‘Actually this was the EMs project. She should get all the credit.’\"]]],[10,1],[1,\"p\",[[0,[],0,\"And just like that, the team had crossed one of the two uncrossable chasms.\"]]],[10,2],[1,\"p\",[[0,[],0,\"At the next planning meeting the PM sits down, rubs his hands gleefully and asks — so what technical debt should we pay down this sprint?\"]]],[1,\"p\",[[0,[],0,\"The CTO was waiting for him at the TT table.\"]]],[10,3],[1,\"p\",[[0,[],0,\"A wise man once said -\"]]],[1,\"p\",[[0,[1],1,\"The biggest determinant of execution success is a cohesiveness of thought from the top to the bottom of the organisation.\"]]],[1,\"p\",[[0,[],0,\"There is the famous story of JFK visiting Cape Canaveral, after having thrown NASA under the bus with a goal so audacious that from then onwards all such audacious goals would be called ‘moonshots’. There he met a janitor and he asked him ‘what do you do?’. Pat comes the reply — I’m sending a man to the moon.\"]]],[1,\"p\",[[0,[],0,\"This is a level of mission driven cohesion that puts lesser orgs to shame, where people say ‘I do frontend’ or ‘I represent the user in my org’. Does your org have the cohesion of thought and intent that NASA had? Can you get the Saturnians to thrive on Jupiter, and vice versa?\"]]],[1,\"p\",[[0,[],0,\"For Product and Engineering to be of one mind, two chasms have to be crossed. PMs have to cross the chasm of misunderstanding about the developers. And EMs have to feel the needs of the business in their bones.\"]]],[1,\"p\",[[0,[],0,\"For a family to be happy, it needs love. And love is the taking of another’s interests as our own. When the PMs and EMs take each others’ interests to be their own interests, then the Product Engineering team can be happy.\"]]],[1,\"p\",[[0,[],0,\"These are the two uncrossable chasms and they are crossed not through effort but through the intense longing for the chasm to not exist anymore.\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"\u003cp\u003e\u003c/p\u003e\u003cp\u003eHappy product engineering orgs are all alike. Every unhappy product engineering org is unhappy in its own way.\u003c/p\u003e\u003cp\u003e(Apologies to Leo Tolstoy)\u003c/p\u003e\u003cblockquote\u003e\u003cs\u003eThis is an early access article for Founder Members. It will be made available to other membership tiers over time. Enjoy your early access and let me know what you think about this article in the comments below.\u003c/s\u003e\u003cbr\u003e\u003cbr\u003eAs promised, expanding access to all paid subscribers. Enjoy your early access. The article will be made free for all in a couple of weeks. If you can’t subscribe, all you need to do is wait a bit. If you can, I’d appreciate all the support I can get for my writing.\u003cbr\u003e\u003cbr\u003eCheers\u003c/blockquote\u003e\u003cp\u003eAh! Product Engineering — the volatile marriage of hackers and hustlers, the awkward cohabitation of Jovians and Saturnians, the Odd Couple of the professional world — many are your woes, colossal your misunderstandings, how unhappy your marriage!\u003c/p\u003e\u003cp\u003eBut it needn’t be this way. Come, let me tell you a story.\u003c/p\u003e\u003c!--members-only--\u003e\u003cp\u003eWe set the scene in a mid-sized product engineering org at a company whose product is quite scaled up. Now in a scaled up product it’s very hard to unlock new opportunities for growth and so the Product team would spend endless hours in the weeds of the data searching for an opportunity to extract just a little bit more value from their users. This naturally involved a lot of meetings with leadership and leaving each meeting with the exhortation to search more, to search harder and also to search in a different place.\u003c/p\u003e\u003cp\u003eIn other words, the product team was very busy.\u003c/p\u003e\u003cp\u003eAnd in order to keep the engineers busy, the product team would bring to the backlog their most promising ideas — tweak this copy and we’ll see a 2% increase in conversions. Add this new type of discount code for a 1% hike in revenue. Add a hidden div with a photo of Laxmi, the Goddess of Wealth, to bless our payments pages… none of it moved any numbers.\u003c/p\u003e\u003cp\u003eAll this time the Engineering Manager had been suggesting that the team might be better utilised paying off some technical debt. The payment pages were slow and the team had identified several bottlenecks that could improve the performance. Also, technical debt meant that the experience of working on these pages was very painful. Perhaps they might consider taking a sprint to rewrite parts of it in React?\u003c/p\u003e\u003cp\u003eA whole sprint?, asked the terrified PM. But, but that means that all these projects will be late. Request denied.\u003c/p\u003e\u003cp\u003eAnd so it went. The engineers would slave over one feature after another and nothing seemed to work. Along the way, two things happened concurrently. The EM started to run out of patience. And the PM started to run out of ideas.\u003c/p\u003e\u003cp\u003eAt one sprint planning meeting the breaking was reached and crossed, left in the rear mirror. The EM finally put her foot down and said ‘enough is enough! we’re not working on your shitty ideas any more. The devs have suffered enough. Please go away for one sprint.’, The PM considered the steely determination on the EMs face, looked at the items on the backlog and seeing that he was now at the stage of seeking Divine Intervention, magnanimously agreed.\u003c/p\u003e\u003cp\u003eBut the magnanimity was a mere show. Inside, the PM didn’t feel it. A whole sprint wasted on devs wanting to scratch their own itch instead of ‘doing what’s right for the business’! Oh, the waste! The sheer waste!\u003c/p\u003e\u003cp\u003eFor the whole sprint the PM paced up and down, agitated, searching furiously for a way to save his job — because that’s how bad it had gotten. It was only with a great effort of the will that he restrained himself from popping in to the team every few hours to ask how it’s going. Besides, the EM was standing guard with a grim and determined look on her face. The PM inferred correctly that she was not a woman who would be putting up with any interruptions.\u003c/p\u003e\u003cp\u003eTo distract himself, he started a long running TT match with the CTO.\u003c/p\u003e\u003cp\u003eThe smiles on the faces of the team as they worked only served to increase the PMs irritation. ‘These  nerds only care about one thing’, he fumed as he stalked off to the Cafe for another game of TT.\u003c/p\u003e\u003cp\u003eA week passes. Only another week to go to the end of the sprint. PM wakes up on Wednesday morning to a release notification. The new payment pages have rolled out to 10% of users. The data starts to trickle in. It’s obvious that nothing is broken, but there’s so little data that one can’t really infer anything more. The team rolls out to 50%.\u003c/p\u003e\u003cp\u003ePM wakes up on Thursday morning to find a healthy bump in revenue. Checking the results of the A/B he finds the new payment pages converting 30% better than the old ones. There must be some mistake! he says. This cannot be.\u003c/p\u003e\u003cp\u003eBy the time Friday evening rolls around it is confirmed. The team is high-fiving and whooping it up in the office. The PM, feeling mighty sheepish, walks up to the team, swallows his pride and gives them all a heartfelt congratulations. The owner of the company walks by and says ‘I saw the reports this morning. Good job, PM’.\u003c/p\u003e\u003cp\u003e‘Thanks boss’, says the PM and then stops. And he feels something relax in his heart and he says ‘Actually this was the EMs project. She should get all the credit.’\u003c/p\u003e\u003cfigure class=\"kg-card kg-image-card\"\u003e\u003cimg src=\"__GHOST_URL__/content/images/public/images/2b085361-e157-4ab2-b29e-71d0da97f898_400x420.jpg\" class=\"kg-image\" alt=\"Meme: \u0026quot;I'm not crying, You're crying!\u0026quot; - All Templates ...\" loading=\"lazy\" title=\"Meme: \u0026quot;I'm not crying, You're crying!\u0026quot; - All Templates ...\"\u003e\u003c/figure\u003e\u003cp\u003eAnd just like that, the team had crossed one of the two uncrossable chasms.\u003c/p\u003e\u003chr\u003e\u003cp\u003eAt the next planning meeting the PM sits down, rubs his hands gleefully and asks — so what technical debt should we pay down this sprint?\u003c/p\u003e\u003cp\u003eThe CTO was waiting for him at the TT table.\u003c/p\u003e\u003chr\u003e\u003cp\u003eA wise man once said -\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThe biggest determinant of execution success is a cohesiveness of thought from the top to the bottom of the organisation.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThere is the famous story of JFK visiting Cape Canaveral, after having thrown NASA under the bus with a goal so audacious that from then onwards all such audacious goals would be called ‘moonshots’. There he met a janitor and he asked him ‘what do you do?’. Pat comes the reply — I’m sending a man to the moon.\u003c/p\u003e\u003cp\u003eThis is a level of mission driven cohesion that puts lesser orgs to shame, where people say ‘I do frontend’ or ‘I represent the user in my org’. Does your org have the cohesion of thought and intent that NASA had? Can you get the Saturnians to thrive on Jupiter, and vice versa?\u003c/p\u003e\u003cp\u003eFor Product and Engineering to be of one mind, two chasms have to be crossed. PMs have to cross the chasm of misunderstanding about the developers. And EMs have to feel the needs of the business in their bones.\u003c/p\u003e\u003cp\u003eFor a family to be happy, it needs love. And love is the taking of another’s interests as our own. When the PMs and EMs take each others’ interests to be their own interests, then the Product Engineering team can be happy.\u003c/p\u003e\u003cp\u003eThese are the two uncrossable chasms and they are crossed not through effort but through the intense longing for the chasm to not exist anymore.\u003c/p\u003e","comment_id":"638b65ed07bd7780dce71b39","plaintext":"Happy product engineering orgs are all alike. Every unhappy product engineering org is unhappy in its own way.\n\n(Apologies to Leo Tolstoy)\n\nThis is an early access article for Founder Members. It will be made available to other membership tiers over time. Enjoy your early access and let me know what you think about this article in the comments below.\n\nAs promised, expanding access to all paid subscribers. Enjoy your early access. The article will be made free for all in a couple of weeks. If you can’t subscribe, all you need to do is wait a bit. If you can, I’d appreciate all the support I can get for my writing.\n\nCheers\n\nAh! Product Engineering — the volatile marriage of hackers and hustlers, the awkward cohabitation of Jovians and Saturnians, the Odd Couple of the professional world — many are your woes, colossal your misunderstandings, how unhappy your marriage!\n\nBut it needn’t be this way. Come, let me tell you a story.\n\nWe set the scene in a mid-sized product engineering org at a company whose product is quite scaled up. Now in a scaled up product it’s very hard to unlock new opportunities for growth and so the Product team would spend endless hours in the weeds of the data searching for an opportunity to extract just a little bit more value from their users. This naturally involved a lot of meetings with leadership and leaving each meeting with the exhortation to search more, to search harder and also to search in a different place.\n\nIn other words, the product team was very busy.\n\nAnd in order to keep the engineers busy, the product team would bring to the backlog their most promising ideas — tweak this copy and we’ll see a 2% increase in conversions. Add this new type of discount code for a 1% hike in revenue. Add a hidden div with a photo of Laxmi, the Goddess of Wealth, to bless our payments pages… none of it moved any numbers.\n\nAll this time the Engineering Manager had been suggesting that the team might be better utilised paying off some technical debt. The payment pages were slow and the team had identified several bottlenecks that could improve the performance. Also, technical debt meant that the experience of working on these pages was very painful. Perhaps they might consider taking a sprint to rewrite parts of it in React?\n\nA whole sprint?, asked the terrified PM. But, but that means that all these projects will be late. Request denied.\n\nAnd so it went. The engineers would slave over one feature after another and nothing seemed to work. Along the way, two things happened concurrently. The EM started to run out of patience. And the PM started to run out of ideas.\n\nAt one sprint planning meeting the breaking was reached and crossed, left in the rear mirror. The EM finally put her foot down and said ‘enough is enough! we’re not working on your shitty ideas any more. The devs have suffered enough. Please go away for one sprint.’, The PM considered the steely determination on the EMs face, looked at the items on the backlog and seeing that he was now at the stage of seeking Divine Intervention, magnanimously agreed.\n\nBut the magnanimity was a mere show. Inside, the PM didn’t feel it. A whole sprint wasted on devs wanting to scratch their own itch instead of ‘doing what’s right for the business’! Oh, the waste! The sheer waste!\n\nFor the whole sprint the PM paced up and down, agitated, searching furiously for a way to save his job — because that’s how bad it had gotten. It was only with a great effort of the will that he restrained himself from popping in to the team every few hours to ask how it’s going. Besides, the EM was standing guard with a grim and determined look on her face. The PM inferred correctly that she was not a woman who would be putting up with any interruptions.\n\nTo distract himself, he started a long running TT match with the CTO.\n\nThe smiles on the faces of the team as they worked only served to increase the PMs irritation. ‘These  nerds only care about one thing’, he fumed as he stalked off to the Cafe for another game of TT.\n\nA week passes. Only another week to go to the end of the sprint. PM wakes up on Wednesday morning to a release notification. The new payment pages have rolled out to 10% of users. The data starts to trickle in. It’s obvious that nothing is broken, but there’s so little data that one can’t really infer anything more. The team rolls out to 50%.\n\nPM wakes up on Thursday morning to find a healthy bump in revenue. Checking the results of the A/B he finds the new payment pages converting 30% better than the old ones. There must be some mistake! he says. This cannot be.\n\nBy the time Friday evening rolls around it is confirmed. The team is high-fiving and whooping it up in the office. The PM, feeling mighty sheepish, walks up to the team, swallows his pride and gives them all a heartfelt congratulations. The owner of the company walks by and says ‘I saw the reports this morning. Good job, PM’.\n\n‘Thanks boss’, says the PM and then stops. And he feels something relax in his heart and he says ‘Actually this was the EMs project. She should get all the credit.’\n\nAnd just like that, the team had crossed one of the two uncrossable chasms.\n\nAt the next planning meeting the PM sits down, rubs his hands gleefully and asks — so what technical debt should we pay down this sprint?\n\nThe CTO was waiting for him at the TT table.\n\nA wise man once said -\n\nThe biggest determinant of execution success is a cohesiveness of thought from the top to the bottom of the organisation.\n\nThere is the famous story of JFK visiting Cape Canaveral, after having thrown NASA under the bus with a goal so audacious that from then onwards all such audacious goals would be called ‘moonshots’. There he met a janitor and he asked him ‘what do you do?’. Pat comes the reply — I’m sending a man to the moon.\n\nThis is a level of mission driven cohesion that puts lesser orgs to shame, where people say ‘I do frontend’ or ‘I represent the user in my org’. Does your org have the cohesion of thought and intent that NASA had? Can you get the Saturnians to thrive on Jupiter, and vice versa?\n\nFor Product and Engineering to be of one mind, two chasms have to be crossed. PMs have to cross the chasm of misunderstanding about the developers. And EMs have to feel the needs of the business in their bones.\n\nFor a family to be happy, it needs love. And love is the taking of another’s interests as our own. When the PMs and EMs take each others’ interests to be their own interests, then the Product Engineering team can be happy.\n\nThese are the two uncrossable chasms and they are crossed not through effort but through the intense longing for the chasm to not exist anymore.","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"members","email_recipient_filter":"all","created_at":"2022-11-23T08:31:26.000Z","updated_at":"2022-12-13T08:20:52.000Z","published_at":"2022-11-23T08:31:26.000Z","custom_excerpt":"the uncrossable chasms - Part 1","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"638b9a0897ce15003df1147b","uuid":"e91edb93-e38e-49e7-8344-834b9f72cbd8","title":"Devs don't care about business!!","slug":"devs-dont-care-about-business","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"paywall\",{}],[\"paywall\",{}],[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=t6Mz_jzZLwk\",\"html\":\"\u003ciframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/t6Mz_jzZLwk?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen title=\\\"Day 2 - Opening Keynote by Siddharth Sharma on \u0026quot;Programming Carbon Based Wetwares\u0026quot;\\\"\u003e\u003c/iframe\u003e\",\"type\":\"video\",\"metadata\":{\"title\":\"Day 2 - Opening Keynote by Siddharth Sharma on \\\"Programming Carbon Based Wetwares\\\"\",\"author_name\":\"RubyConfIndia\",\"author_url\":\"https://www.youtube.com/@rubyconfindia427\",\"height\":113,\"width\":200,\"version\":\"1.0\",\"provider_name\":\"YouTube\",\"provider_url\":\"https://www.youtube.com/\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/t6Mz_jzZLwk/hqdefault.jpg\"}}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/public/images/c8218ffe-0ffc-4e0e-baac-be4cb804e9a2_888x499.jpg\"}],[\"html\",{\"html\":\"\u003cfigure class=\\\"kg-card kg-bookmark-card\\\"\u003e\u003ca class=\\\"kg-bookmark-container\\\" href=\\\"__GHOST_URL__/pms-are-from-saturn-ems-are-from/\\\"\u003e\u003cdiv class=\\\"kg-bookmark-content\\\"\u003e\u003cdiv class=\\\"kg-bookmark-title\\\"\u003ePMs are from Saturn, EMs are from Jupiter\u003c/div\u003e\u003cdiv class=\\\"kg-bookmark-description\\\"\u003eHappy product engineering orgs are all alike. Every unhappy product engineering org is unhappy in its own way. (Apologies to Leo Tolstoy) This is an early access article for Founder Members. It will be made available to other membership tiers over time. Enjoy your early access and let me know what you think about this article in the comments below.\u003c/div\u003e\u003cdiv class=\\\"kg-bookmark-metadata\\\"\u003e\u003cimg class=\\\"kg-bookmark-icon\\\" src=\\\"__GHOST_URL__/content/images/public/images/704e9808-008d-4031-a390-849deaee781b_400x400.png\\\"\u003e\u003cspan class=\\\"kg-bookmark-author\\\"\u003eThe Engineering Organisation\u003c/span\u003e\u003c/div\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"blockquote\",[[0,[],0,\"This post is for anyone who wants to build better alignment between tech and business.\"],[1,[],0,0],[1,[],0,1],[0,[],0,\"Early access for Founder Members as usual. This post will be sent out to all Paid Members in a week and some time later be made free. If you can’t become a paid subscriber, all you have to do is wait a bit. And if you can subscribe, I’ll really appreciate the support for my writing.\"],[1,[],0,2],[1,[],0,3],[0,[],0,\"Enjoy, and do let me know what you thought of this post in the comments below.\"],[1,[],0,4]]],[10,0],[1,\"p\",[[0,[],0,\"Talking to an entrepreneur friend of mine last night and he was complaining about the fact that given a choice, devs will choose to work on the more technically challenging thing than on the thing that makes the most business impact.\"]]],[1,\"p\",[[0,[],0,\"Here’s what I told him.\"]]],[10,1],[1,\"h3\",[[0,[],0,\"one simple reason\"]]],[1,\"p\",[[0,[],0,\"There is one simple reason why devs do not seem to care about the business - \"],[0,[0],1,\"their reward mechanisms are wired differently.\"]]],[1,\"p\",[[0,[],0,\"And when one goes up against a hard-wired reward mechanism, no amount of wishing for things is going to make that reward mechanism suddenly change its behaviour. In the developers mind, nothing comes close to the dopamine hits from writing code. Now compare this to their experience of the ‘business side’. All they get is negative vibes ie the constant wringing of hands and complaining that ‘devs don’t care about business’.\"]]],[1,\"blockquote\",[[0,[],0,\"Heard about the Pygmalion Effect? People will consistently strive to meet your expectations from them, low or high. So when you wring your hands and complain that devs are not good at business, that’s precisely what you get.\"]]],[1,\"p\",[[0,[],0,\"Add to this the fact that no one has really taught devs how to ‘do business stuff’. So you get a situation where devs are struggling and in return for their struggles all they get are bad vibes.\"]]],[1,\"p\",[[0,[],0,\"Add to this the fact that these ‘business types’ in their sharp suits and trendy haircuts are a pretty alien species to the developer, and if they are familiar with this species it is generally in terms of the fact that it was precisely kids like these that made their childhood a living hell and had them retreat into their nerd shell.\"]]],[1,\"p\",[[0,[],0,\"Not a great recipe for a good dopamine high.\"]]],[1,\"p\",[[0,[],0,\"In fact, the average dev in the average company is trapped in a negative feedback loop. Result? Devs retreat further and further into their shell.\"]]],[1,\"p\",[[0,[],0,\"To get the devs interested in business, we have to reverse this feedback loop so that it feeds them dopamine instead of cortisol and for that we have to change the environment.\"]]],[10,2],[1,\"h3\",[[0,[],0,\"rewiring the circuitry\"]]],[1,\"p\",[[0,[],0,\"It is possible to build a team that is extremely aligned with business outcomes, but in order to do that, we have to understand how the brain works. This post does not allow us to go into details but here’s  excellent videos for you to watch.\"]]],[1,\"p\",[[0,[],0,\"(shameless self plug)\"]]],[10,3],[1,\"p\",[[0,[],0,\"I talked about this and other issues at RubyConf India in 2018 or so.\"]]],[1,\"p\",[[0,[],0,\"But in essence what we need to do is understand why devs don’t care about the business, or in other words, why are their reward mechanism the way they are. The answer is actually pretty simple.\"]]],[1,\"h3\",[[0,[],0,\"devs are not bad at business. they just haven’t practiced.\"]]],[1,\"p\",[[0,[],0,\"If you’re an entrepreneur, that ‘business’ vibe you have has been with you for a long, long time. At some point you immersed yourself in business literature, studied business models, understood how money works, developed a relationship with these concepts that went well beyond intellectual understanding. You have forgotten how hard you had to work on these skills. You live and breathe business just like your devs live and breathe code.\"]]],[1,\"p\",[[0,[],0,\"Expecting devs to just ‘get better at business’ is like expecting business folks to just get better at coding.\"]]],[1,\"p\",[[0,[],0,\"No. It will not happen fast and it will not happen for free. But it can be made to happen through a process of, for lack of a better word, hypnosis.\"]]],[1,\"h3\",[[0,[],0,\"mesmerizing metrics\"]]],[1,\"p\",[[0,[],0,\"One way to do this would be to start would be to start on familiar ground. Metrics.\"]]],[1,\"p\",[[0,[],0,\"All engineers understand metrics. We’re just going to get them familiar with metrics besides API latency times and memory/CPU usage. We’re going to feed them Product Metrics. Product metrics look just like engineering metrics — see the same charts and graphs and what not! No big deal. Easy!\"]]],[1,\"p\",[[0,[],0,\"Read on to see the magic of mesmerizing metrics 👇\"]]],[1,\"h4\",[[0,[],0,\"low grade, constant metric exposure….\"]]],[1,\"p\",[[0,[],0,\"Keep these product metrics easily accessible by the team. In fact, place these metrics in their environment such that they cannot help but look at them several times a day.\"]]],[1,\"p\",[[0,[],0,\"There is a whole series of posts possible on dashboarding for product orgs, but for the purposes of this essay, suffice to say that if you do not have excellent and easily accessible dashboards for product metrics including A/B tests, that’s the problem you need to fix first.\"]]],[1,\"blockquote\",[[0,[],0,\"One of the big losses of the move to remote work is that we no longer have TVs in the office showing the product metrics. This ‘information radiation’ was a very reliable way to steep the developer teams in the product metrics. You can try and recreate it by piping dashboards into Slack 4 - 6 times a day.\"]]],[1,\"p\",[[0,[],0,\"When they spend so much time around these metrics they start to get a feel for the product metrics — their seasonality and rhythms, their reaction to major world events or advertising pushes, and so on.\"]]],[1,\"p\",[[0,[],0,\"It is this constant exposure to metrics that causes the hypnosis. \"],[0,[0],1,\"Constant, low-grade, subconscious exposure to metrics.\"]]],[1,\"h4\",[[0,[],0,\"…in a supporting environment…\"]]],[1,\"p\",[[0,[],0,\"Here it is critically important that the business and product people gently guide the devs as to which metrics are important, which ones have changed with which release, why they changed in this particular way, what the goals are and so on. Devs are going to feel like noobs when it comes to this stuff and reducing the anxiety they feel by supporting them in their learning goes a long way to accelerating the process. If the devs feel trusted and supported they will do all they can to live up to that trust.\"]]],[1,\"h4\",[[0,[],0,\"…connected emotionally…\"]]],[1,\"p\",[[0,[],0,\"With enough exposure to metrics, patterns start to emerge. The subconscious cannot help it. It notices things and wants to tell a story around them. Now that these patterns start to emerge, we can start to put some ‘feels’ into the metrics. For a product like shaadi.com it was messaging like ‘so many thousand skipped heartbeats today’, or at rBus we would calculate the number of ‘trips to the moon’ that our kilometerage on the buses represented — which is a way to anchor the boring metric of ‘connect requests sent’ or ‘kilometers travelled’ in a more evocative story, a more emotional story in order to connect the devs with the actual outcomes of their work.\"]]],[1,\"h4\",[[0,[],0,\"…yields dopamine\"]]],[1,\"p\",[[0,[],0,\"Pretty soon, the devs start to see the effects of their work on these dashboards. “Whoa! I did that? This is cool!!” they exclaim. \"],[0,[0],1,\"This is their first hit of dopamine from a business metric.\"],[0,[],0,\" This is where you need to get to!\"]]],[1,\"blockquote\",[[0,[],0,\"Pretty much my entire philosophy of management can be summarised as ‘get people to the a-ha moment and then get out of the fucking way’\"]]],[1,\"p\",[[0,[],0,\"Now they want more, so every release is sent out with its own dashboards and the devs check it incessantly. It’s almost as if they now don’t think of their job as writing code, they see their job as improving those metrics, and code is just how they do it. The dopamine hit has gone from the ‘check in the code’ to ‘see metrics move’! Imagine that. The same devs who used to ship broken builds to QA and think their work was done are now huddling together with the QA and urgently pushing fixes because they just can’t wait to see the result of their work on a dashboard somewhere.\"]]],[1,\"blockquote\",[[0,[],0,\"Once devs got hold of the dashboards, amazing things started to happen — the Mean Time to Repair a Bug crashed. \"],[1,[],0,5],[1,[],0,6],[0,[],0,\"Earlier, the PM would pull metrics from a data warehouse twice a week and then share the results with the devs, by which time the devs would have moved on to the next ticket.\"],[1,[],0,7],[1,[],0,8],[0,[],0,\"Now devs ship, come back the next morning, check the metrics and immediately spot any anomalies and the bugs they might point to.\"]]],[1,\"p\",[[0,[],0,\"Add to this some attention from the business side — the CEO praising the team, for example — and you start to already rewire the reward mechanism of the team!\"]]],[1,\"p\",[[0,[],0,\"Celebrations will start to break out all the time as one or the other metric milestone was passed, further anchoring the dopamine hits from the actual business outcomes.\"]]],[1,\"p\",[[0,[],0,\"All of this I have seen happen over and over again just by changing the environment, providing the correct encouragement (and discouragement) and being alert to the pain/pleasure ratio.\"]]],[1,\"h3\",[[0,[],0,\"be careful what you wish for.\"]]],[1,\"p\",[[0,[],0,\"Now that the dev team is really cooking, gone are the days when you could just hand them a PRD and expect them to comply silently.\"]]],[1,\"p\",[[0,[],0,\"Now that they understand this shit, they’ll dig into it in some detail because they don’t want to waste time on stuff that might not work. But you get something magical in return, if you allow it. When they understand the ‘why’ behind the PRD they will propose cheap and fast ways of testing assumptions. They will start aligning guild work with the intention of making that next product change easier. Their entire reason for doing anything will be business metrics. And stabilising this intent is a lifelong love for coding. The perfect balance.\"]]],[1,\"p\",[[0,[],0,\"A team of devs that feels the business metrics in their bones is a very worthwhile investment indeed.\"]]],[1,\"p\",[[0,[0],1,\"Now toss in a hackathon\"],[0,[],0,\" — get the devs to team up with whoever they like and bring their creative ideas to the fore. You will be surprised at the result! Suddenly you will realise that the devs have been creative people with a product sense and an incredible ability to ship fast! Why had you never seen this before? Because you wanted it for free. You wanted it to ‘just happen’.\"]]],[10,4],[1,\"h3\",[[0,[],0,\"nothing ‘just happens’.\"]]],[1,\"p\",[[0,[],0,\"Nothing ‘just happens’. It has to be made to happen. It requires time and investment. Then anything can happen. Including getting a dev team that gets dopamine hits from business impact.\"]]],[1,\"h3\",[[0,[],0,\"Crossing the Chasm\"]]],[1,\"p\",[[0,[],0,\"In the previous post we saw how the business side came to understand the compulsions of the developers and crossed the first chasm.\"]]],[10,5],[1,\"p\",[[0,[],0,\"And in this post we saw how devs can cross the second chasm over to the business side.\"]]],[1,\"p\",[[0,[],0,\"Do this enough and you’ll have a team where the various functions take each others’ problems as their own and work together to do what’s best for the user. Such a team is a solid competitive advantage and very much worth investing in.\"]]],[1,\"p\",[[0,[],0,\"Hope this helped. Feel free to ask any questions below.\"]]],[1,\"p\",[[0,[],0,\"cheers\"]]],[1,\"p\",[[0,[],0,\"svs.\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"\u003cblockquote\u003eThis post is for anyone who wants to build better alignment between tech and business.\u003cbr\u003e\u003cbr\u003eEarly access for Founder Members as usual. This post will be sent out to all Paid Members in a week and some time later be made free. If you can’t become a paid subscriber, all you have to do is wait a bit. And if you can subscribe, I’ll really appreciate the support for my writing.\u003cbr\u003e\u003cbr\u003eEnjoy, and do let me know what you thought of this post in the comments below.\u003cbr\u003e\u003c/blockquote\u003e\u003chr\u003e\u003cp\u003eTalking to an entrepreneur friend of mine last night and he was complaining about the fact that given a choice, devs will choose to work on the more technically challenging thing than on the thing that makes the most business impact.\u003c/p\u003e\u003cp\u003eHere’s what I told him.\u003c/p\u003e\u003c!--members-only--\u003e\u003ch3 id=\"one-simple-reason\"\u003eone simple reason\u003c/h3\u003e\u003cp\u003eThere is one simple reason why devs do not seem to care about the business - \u003cstrong\u003etheir reward mechanisms are wired differently.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAnd when one goes up against a hard-wired reward mechanism, no amount of wishing for things is going to make that reward mechanism suddenly change its behaviour. In the developers mind, nothing comes close to the dopamine hits from writing code. Now compare this to their experience of the ‘business side’. All they get is negative vibes ie the constant wringing of hands and complaining that ‘devs don’t care about business’.\u003c/p\u003e\u003cblockquote\u003eHeard about the Pygmalion Effect? People will consistently strive to meet your expectations from them, low or high. So when you wring your hands and complain that devs are not good at business, that’s precisely what you get.\u003c/blockquote\u003e\u003cp\u003eAdd to this the fact that no one has really taught devs how to ‘do business stuff’. So you get a situation where devs are struggling and in return for their struggles all they get are bad vibes.\u003c/p\u003e\u003cp\u003eAdd to this the fact that these ‘business types’ in their sharp suits and trendy haircuts are a pretty alien species to the developer, and if they are familiar with this species it is generally in terms of the fact that it was precisely kids like these that made their childhood a living hell and had them retreat into their nerd shell.\u003c/p\u003e\u003cp\u003eNot a great recipe for a good dopamine high.\u003c/p\u003e\u003cp\u003eIn fact, the average dev in the average company is trapped in a negative feedback loop. Result? Devs retreat further and further into their shell.\u003c/p\u003e\u003cp\u003eTo get the devs interested in business, we have to reverse this feedback loop so that it feeds them dopamine instead of cortisol and for that we have to change the environment.\u003c/p\u003e\u003c!--members-only--\u003e\u003ch3 id=\"rewiring-the-circuitry\"\u003erewiring the circuitry\u003c/h3\u003e\u003cp\u003eIt is possible to build a team that is extremely aligned with business outcomes, but in order to do that, we have to understand how the brain works. This post does not allow us to go into details but here’s  excellent videos for you to watch.\u003c/p\u003e\u003cp\u003e(shameless self plug)\u003c/p\u003e\u003cfigure class=\"kg-card kg-embed-card\"\u003e\u003ciframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/t6Mz_jzZLwk?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Day 2 - Opening Keynote by Siddharth Sharma on \u0026quot;Programming Carbon Based Wetwares\u0026quot;\"\u003e\u003c/iframe\u003e\u003c/figure\u003e\u003cp\u003eI talked about this and other issues at RubyConf India in 2018 or so.\u003c/p\u003e\u003cp\u003eBut in essence what we need to do is understand why devs don’t care about the business, or in other words, why are their reward mechanism the way they are. The answer is actually pretty simple.\u003c/p\u003e\u003ch3 id=\"devs-are-not-bad-at-business-they-just-haven-t-practiced-\"\u003edevs are not bad at business. they just haven’t practiced.\u003c/h3\u003e\u003cp\u003eIf you’re an entrepreneur, that ‘business’ vibe you have has been with you for a long, long time. At some point you immersed yourself in business literature, studied business models, understood how money works, developed a relationship with these concepts that went well beyond intellectual understanding. You have forgotten how hard you had to work on these skills. You live and breathe business just like your devs live and breathe code.\u003c/p\u003e\u003cp\u003eExpecting devs to just ‘get better at business’ is like expecting business folks to just get better at coding.\u003c/p\u003e\u003cp\u003eNo. It will not happen fast and it will not happen for free. But it can be made to happen through a process of, for lack of a better word, hypnosis.\u003c/p\u003e\u003ch3 id=\"mesmerizing-metrics\"\u003emesmerizing metrics\u003c/h3\u003e\u003cp\u003eOne way to do this would be to start would be to start on familiar ground. Metrics.\u003c/p\u003e\u003cp\u003eAll engineers understand metrics. We’re just going to get them familiar with metrics besides API latency times and memory/CPU usage. We’re going to feed them Product Metrics. Product metrics look just like engineering metrics — see the same charts and graphs and what not! No big deal. Easy!\u003c/p\u003e\u003cp\u003eRead on to see the magic of mesmerizing metrics 👇\u003c/p\u003e\u003ch4 id=\"low-grade-constant-metric-exposure-\"\u003elow grade, constant metric exposure….\u003c/h4\u003e\u003cp\u003eKeep these product metrics easily accessible by the team. In fact, place these metrics in their environment such that they cannot help but look at them several times a day.\u003c/p\u003e\u003cp\u003eThere is a whole series of posts possible on dashboarding for product orgs, but for the purposes of this essay, suffice to say that if you do not have excellent and easily accessible dashboards for product metrics including A/B tests, that’s the problem you need to fix first.\u003c/p\u003e\u003cblockquote\u003eOne of the big losses of the move to remote work is that we no longer have TVs in the office showing the product metrics. This ‘information radiation’ was a very reliable way to steep the developer teams in the product metrics. You can try and recreate it by piping dashboards into Slack 4 - 6 times a day.\u003c/blockquote\u003e\u003cp\u003eWhen they spend so much time around these metrics they start to get a feel for the product metrics — their seasonality and rhythms, their reaction to major world events or advertising pushes, and so on.\u003c/p\u003e\u003cp\u003eIt is this constant exposure to metrics that causes the hypnosis. \u003cstrong\u003eConstant, low-grade, subconscious exposure to metrics.\u003c/strong\u003e\u003c/p\u003e\u003ch4 id=\"-in-a-supporting-environment-\"\u003e…in a supporting environment…\u003c/h4\u003e\u003cp\u003eHere it is critically important that the business and product people gently guide the devs as to which metrics are important, which ones have changed with which release, why they changed in this particular way, what the goals are and so on. Devs are going to feel like noobs when it comes to this stuff and reducing the anxiety they feel by supporting them in their learning goes a long way to accelerating the process. If the devs feel trusted and supported they will do all they can to live up to that trust.\u003c/p\u003e\u003ch4 id=\"-connected-emotionally-\"\u003e…connected emotionally…\u003c/h4\u003e\u003cp\u003eWith enough exposure to metrics, patterns start to emerge. The subconscious cannot help it. It notices things and wants to tell a story around them. Now that these patterns start to emerge, we can start to put some ‘feels’ into the metrics. For a product like shaadi.com it was messaging like ‘so many thousand skipped heartbeats today’, or at rBus we would calculate the number of ‘trips to the moon’ that our kilometerage on the buses represented — which is a way to anchor the boring metric of ‘connect requests sent’ or ‘kilometers travelled’ in a more evocative story, a more emotional story in order to connect the devs with the actual outcomes of their work.\u003c/p\u003e\u003ch4 id=\"-yields-dopamine\"\u003e…yields dopamine\u003c/h4\u003e\u003cp\u003ePretty soon, the devs start to see the effects of their work on these dashboards. “Whoa! I did that? This is cool!!” they exclaim. \u003cstrong\u003eThis is their first hit of dopamine from a business metric.\u003c/strong\u003e This is where you need to get to!\u003c/p\u003e\u003cblockquote\u003ePretty much my entire philosophy of management can be summarised as ‘get people to the a-ha moment and then get out of the fucking way’\u003c/blockquote\u003e\u003cp\u003eNow they want more, so every release is sent out with its own dashboards and the devs check it incessantly. It’s almost as if they now don’t think of their job as writing code, they see their job as improving those metrics, and code is just how they do it. The dopamine hit has gone from the ‘check in the code’ to ‘see metrics move’! Imagine that. The same devs who used to ship broken builds to QA and think their work was done are now huddling together with the QA and urgently pushing fixes because they just can’t wait to see the result of their work on a dashboard somewhere.\u003c/p\u003e\u003cblockquote\u003eOnce devs got hold of the dashboards, amazing things started to happen — the Mean Time to Repair a Bug crashed. \u003cbr\u003e\u003cbr\u003eEarlier, the PM would pull metrics from a data warehouse twice a week and then share the results with the devs, by which time the devs would have moved on to the next ticket.\u003cbr\u003e\u003cbr\u003eNow devs ship, come back the next morning, check the metrics and immediately spot any anomalies and the bugs they might point to.\u003c/blockquote\u003e\u003cp\u003eAdd to this some attention from the business side — the CEO praising the team, for example — and you start to already rewire the reward mechanism of the team!\u003c/p\u003e\u003cp\u003eCelebrations will start to break out all the time as one or the other metric milestone was passed, further anchoring the dopamine hits from the actual business outcomes.\u003c/p\u003e\u003cp\u003eAll of this I have seen happen over and over again just by changing the environment, providing the correct encouragement (and discouragement) and being alert to the pain/pleasure ratio.\u003c/p\u003e\u003ch3 id=\"be-careful-what-you-wish-for-\"\u003ebe careful what you wish for.\u003c/h3\u003e\u003cp\u003eNow that the dev team is really cooking, gone are the days when you could just hand them a PRD and expect them to comply silently.\u003c/p\u003e\u003cp\u003eNow that they understand this shit, they’ll dig into it in some detail because they don’t want to waste time on stuff that might not work. But you get something magical in return, if you allow it. When they understand the ‘why’ behind the PRD they will propose cheap and fast ways of testing assumptions. They will start aligning guild work with the intention of making that next product change easier. Their entire reason for doing anything will be business metrics. And stabilising this intent is a lifelong love for coding. The perfect balance.\u003c/p\u003e\u003cp\u003eA team of devs that feels the business metrics in their bones is a very worthwhile investment indeed.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNow toss in a hackathon\u003c/strong\u003e — get the devs to team up with whoever they like and bring their creative ideas to the fore. You will be surprised at the result! Suddenly you will realise that the devs have been creative people with a product sense and an incredible ability to ship fast! Why had you never seen this before? Because you wanted it for free. You wanted it to ‘just happen’.\u003c/p\u003e\u003cfigure class=\"kg-card kg-image-card\"\u003e\u003cimg src=\"__GHOST_URL__/content/images/public/images/c8218ffe-0ffc-4e0e-baac-be4cb804e9a2_888x499.jpg\" class=\"kg-image\" alt loading=\"lazy\"\u003e\u003c/figure\u003e\u003ch3 id=\"nothing-just-happens-\"\u003enothing ‘just happens’.\u003c/h3\u003e\u003cp\u003eNothing ‘just happens’. It has to be made to happen. It requires time and investment. Then anything can happen. Including getting a dev team that gets dopamine hits from business impact.\u003c/p\u003e\u003ch3 id=\"crossing-the-chasm\"\u003eCrossing the Chasm\u003c/h3\u003e\u003cp\u003eIn the previous post we saw how the business side came to understand the compulsions of the developers and crossed the first chasm.\u003c/p\u003e\u003c!--kg-card-begin: html--\u003e\u003cfigure class=\"kg-card kg-bookmark-card\"\u003e\u003ca class=\"kg-bookmark-container\" href=\"__GHOST_URL__/pms-are-from-saturn-ems-are-from/\"\u003e\u003cdiv class=\"kg-bookmark-content\"\u003e\u003cdiv class=\"kg-bookmark-title\"\u003ePMs are from Saturn, EMs are from Jupiter\u003c/div\u003e\u003cdiv class=\"kg-bookmark-description\"\u003eHappy product engineering orgs are all alike. Every unhappy product engineering org is unhappy in its own way. (Apologies to Leo Tolstoy) This is an early access article for Founder Members. It will be made available to other membership tiers over time. Enjoy your early access and let me know what you think about this article in the comments below.\u003c/div\u003e\u003cdiv class=\"kg-bookmark-metadata\"\u003e\u003cimg class=\"kg-bookmark-icon\" src=\"__GHOST_URL__/content/images/public/images/704e9808-008d-4031-a390-849deaee781b_400x400.png\"\u003e\u003cspan class=\"kg-bookmark-author\"\u003eThe Engineering Organisation\u003c/span\u003e\u003c/div\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c!--kg-card-end: html--\u003e\u003cp\u003eAnd in this post we saw how devs can cross the second chasm over to the business side.\u003c/p\u003e\u003cp\u003eDo this enough and you’ll have a team where the various functions take each others’ problems as their own and work together to do what’s best for the user. Such a team is a solid competitive advantage and very much worth investing in.\u003c/p\u003e\u003cp\u003eHope this helped. Feel free to ask any questions below.\u003c/p\u003e\u003cp\u003echeers\u003c/p\u003e\u003cp\u003esvs.\u003c/p\u003e","comment_id":"638b65ed07bd7780dce71b3b","plaintext":"This post is for anyone who wants to build better alignment between tech and business.\n\nEarly access for Founder Members as usual. This post will be sent out to all Paid Members in a week and some time later be made free. If you can’t become a paid subscriber, all you have to do is wait a bit. And if you can subscribe, I’ll really appreciate the support for my writing.\n\nEnjoy, and do let me know what you thought of this post in the comments below.\n\n\nTalking to an entrepreneur friend of mine last night and he was complaining about the fact that given a choice, devs will choose to work on the more technically challenging thing than on the thing that makes the most business impact.\n\nHere’s what I told him.\n\n\none simple reason\n\nThere is one simple reason why devs do not seem to care about the business - their reward mechanisms are wired differently.\n\nAnd when one goes up against a hard-wired reward mechanism, no amount of wishing for things is going to make that reward mechanism suddenly change its behaviour. In the developers mind, nothing comes close to the dopamine hits from writing code. Now compare this to their experience of the ‘business side’. All they get is negative vibes ie the constant wringing of hands and complaining that ‘devs don’t care about business’.\n\nHeard about the Pygmalion Effect? People will consistently strive to meet your expectations from them, low or high. So when you wring your hands and complain that devs are not good at business, that’s precisely what you get.\n\nAdd to this the fact that no one has really taught devs how to ‘do business stuff’. So you get a situation where devs are struggling and in return for their struggles all they get are bad vibes.\n\nAdd to this the fact that these ‘business types’ in their sharp suits and trendy haircuts are a pretty alien species to the developer, and if they are familiar with this species it is generally in terms of the fact that it was precisely kids like these that made their childhood a living hell and had them retreat into their nerd shell.\n\nNot a great recipe for a good dopamine high.\n\nIn fact, the average dev in the average company is trapped in a negative feedback loop. Result? Devs retreat further and further into their shell.\n\nTo get the devs interested in business, we have to reverse this feedback loop so that it feeds them dopamine instead of cortisol and for that we have to change the environment.\n\n\nrewiring the circuitry\n\nIt is possible to build a team that is extremely aligned with business outcomes, but in order to do that, we have to understand how the brain works. This post does not allow us to go into details but here’s  excellent videos for you to watch.\n\n(shameless self plug)\n\nI talked about this and other issues at RubyConf India in 2018 or so.\n\nBut in essence what we need to do is understand why devs don’t care about the business, or in other words, why are their reward mechanism the way they are. The answer is actually pretty simple.\n\n\ndevs are not bad at business. they just haven’t practiced.\n\nIf you’re an entrepreneur, that ‘business’ vibe you have has been with you for a long, long time. At some point you immersed yourself in business literature, studied business models, understood how money works, developed a relationship with these concepts that went well beyond intellectual understanding. You have forgotten how hard you had to work on these skills. You live and breathe business just like your devs live and breathe code.\n\nExpecting devs to just ‘get better at business’ is like expecting business folks to just get better at coding.\n\nNo. It will not happen fast and it will not happen for free. But it can be made to happen through a process of, for lack of a better word, hypnosis.\n\n\nmesmerizing metrics\n\nOne way to do this would be to start would be to start on familiar ground. Metrics.\n\nAll engineers understand metrics. We’re just going to get them familiar with metrics besides API latency times and memory/CPU usage. We’re going to feed them Product Metrics. Product metrics look just like engineering metrics — see the same charts and graphs and what not! No big deal. Easy!\n\nRead on to see the magic of mesmerizing metrics 👇\n\nlow grade, constant metric exposure….\n\nKeep these product metrics easily accessible by the team. In fact, place these metrics in their environment such that they cannot help but look at them several times a day.\n\nThere is a whole series of posts possible on dashboarding for product orgs, but for the purposes of this essay, suffice to say that if you do not have excellent and easily accessible dashboards for product metrics including A/B tests, that’s the problem you need to fix first.\n\nOne of the big losses of the move to remote work is that we no longer have TVs in the office showing the product metrics. This ‘information radiation’ was a very reliable way to steep the developer teams in the product metrics. You can try and recreate it by piping dashboards into Slack 4 - 6 times a day.\n\nWhen they spend so much time around these metrics they start to get a feel for the product metrics — their seasonality and rhythms, their reaction to major world events or advertising pushes, and so on.\n\nIt is this constant exposure to metrics that causes the hypnosis. Constant, low-grade, subconscious exposure to metrics.\n\n…in a supporting environment…\n\nHere it is critically important that the business and product people gently guide the devs as to which metrics are important, which ones have changed with which release, why they changed in this particular way, what the goals are and so on. Devs are going to feel like noobs when it comes to this stuff and reducing the anxiety they feel by supporting them in their learning goes a long way to accelerating the process. If the devs feel trusted and supported they will do all they can to live up to that trust.\n\n…connected emotionally…\n\nWith enough exposure to metrics, patterns start to emerge. The subconscious cannot help it. It notices things and wants to tell a story around them. Now that these patterns start to emerge, we can start to put some ‘feels’ into the metrics. For a product like shaadi.com it was messaging like ‘so many thousand skipped heartbeats today’, or at rBus we would calculate the number of ‘trips to the moon’ that our kilometerage on the buses represented — which is a way to anchor the boring metric of ‘connect requests sent’ or ‘kilometers travelled’ in a more evocative story, a more emotional story in order to connect the devs with the actual outcomes of their work.\n\n…yields dopamine\n\nPretty soon, the devs start to see the effects of their work on these dashboards. “Whoa! I did that? This is cool!!” they exclaim. This is their first hit of dopamine from a business metric. This is where you need to get to!\n\nPretty much my entire philosophy of management can be summarised as ‘get people to the a-ha moment and then get out of the fucking way’\n\nNow they want more, so every release is sent out with its own dashboards and the devs check it incessantly. It’s almost as if they now don’t think of their job as writing code, they see their job as improving those metrics, and code is just how they do it. The dopamine hit has gone from the ‘check in the code’ to ‘see metrics move’! Imagine that. The same devs who used to ship broken builds to QA and think their work was done are now huddling together with the QA and urgently pushing fixes because they just can’t wait to see the result of their work on a dashboard somewhere.\n\nOnce devs got hold of the dashboards, amazing things started to happen — the Mean Time to Repair a Bug crashed.\n\nEarlier, the PM would pull metrics from a data warehouse twice a week and then share the results with the devs, by which time the devs would have moved on to the next ticket.\n\nNow devs ship, come back the next morning, check the metrics and immediately spot any anomalies and the bugs they might point to.\n\nAdd to this some attention from the business side — the CEO praising the team, for example — and you start to already rewire the reward mechanism of the team!\n\nCelebrations will start to break out all the time as one or the other metric milestone was passed, further anchoring the dopamine hits from the actual business outcomes.\n\nAll of this I have seen happen over and over again just by changing the environment, providing the correct encouragement (and discouragement) and being alert to the pain/pleasure ratio.\n\n\nbe careful what you wish for.\n\nNow that the dev team is really cooking, gone are the days when you could just hand them a PRD and expect them to comply silently.\n\nNow that they understand this shit, they’ll dig into it in some detail because they don’t want to waste time on stuff that might not work. But you get something magical in return, if you allow it. When they understand the ‘why’ behind the PRD they will propose cheap and fast ways of testing assumptions. They will start aligning guild work with the intention of making that next product change easier. Their entire reason for doing anything will be business metrics. And stabilising this intent is a lifelong love for coding. The perfect balance.\n\nA team of devs that feels the business metrics in their bones is a very worthwhile investment indeed.\n\nNow toss in a hackathon — get the devs to team up with whoever they like and bring their creative ideas to the fore. You will be surprised at the result! Suddenly you will realise that the devs have been creative people with a product sense and an incredible ability to ship fast! Why had you never seen this before? Because you wanted it for free. You wanted it to ‘just happen’.\n\n\nnothing ‘just happens’.\n\nNothing ‘just happens’. It has to be made to happen. It requires time and investment. Then anything can happen. Including getting a dev team that gets dopamine hits from business impact.\n\n\nCrossing the Chasm\n\nIn the previous post we saw how the business side came to understand the compulsions of the developers and crossed the first chasm.\n\nPMs are from Saturn, EMs are from JupiterHappy product engineering orgs are all alike. Every unhappy product engineering org is unhappy in its own way. (Apologies to Leo Tolstoy) This is an early access article for Founder Members. It will be made available to other membership tiers over time. Enjoy your early access and let me know what you think about this article in the comments below.The Engineering Organisation\n\nAnd in this post we saw how devs can cross the second chasm over to the business side.\n\nDo this enough and you’ll have a team where the various functions take each others’ problems as their own and work together to do what’s best for the user. Such a team is a solid competitive advantage and very much worth investing in.\n\nHope this helped. Feel free to ask any questions below.\n\ncheers\n\nsvs.","feature_image":"__GHOST_URL__/content/images/image/youtube/w_728,c_limit/t6mz_jzzlwk.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"members","email_recipient_filter":"all","created_at":"2022-12-02T07:23:42.000Z","updated_at":"2022-12-25T06:05:50.000Z","published_at":"2022-12-02T07:23:42.000Z","custom_excerpt":"\nTalking to an entrepreneur friend of mine last night and he was complaining about the fact that given a choice, devs will choose to work on the more technically challenging thing than on the thing that makes the most business impact.\nHere’s what I told him.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"638b9a0897ce15003df1147c","uuid":"9799c71c-3600-4ccb-94bd-ac342d902bc5","title":"Agile for Real People","slug":"agile-for-real-people","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/public/images/ec1c641c-b93d-4189-b53d-293eb4539d1d_1600x1600.jpg\",\"alt\":\"Marie Kondo Method: Spark Joy Book Tidying Wardrobe Method\",\"title\":\"Marie Kondo Method: Spark Joy Book Tidying Wardrobe Method\"}],[\"button\",{\"alignment\":\"center\",\"buttonUrl\":\"#/portal/signup\",\"buttonText\":\"Subscribe\"}]],\"markups\":[[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"One time, I was on a team that had an impossible deadline. As the stress levels grew, the team realised that the normal way of working was not going to get them across the finish line in time. Actually the truth is it wasn’t just this one time. I have been on such teams quite a lot. The difference is in the way this team reacted.\"]]],[1,\"p\",[[0,[],0,\"This team did something radical. It threw away the rulebook on everything and just started doing the things that would obviously make them go faster. They started keeping a really good track of what they’d already done and what was still left to do. They started convening twice a day to ensure people were not stuck, to align on the approach and to coordinate the next steps. People would work on problems together in order to go faster. QAs were deeply embedded in the teams and though there was little by way of automated testing, the feedback cycle from the tester was fast enough to make a real difference to velocity.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Do you see what they did? The team had just invented Agile. Or better said, it re-invented Agile. Agile Programming itself was invented many years ago. So many years ago, in fact, that it had already completed its transition from “disruptive new methodology empowering teams” to “that damned process”. By the time this particular team found themselves in that age old predicament, Agile was firmly in the list of things that people endure because someone else tells them to.\"]]],[1,\"p\",[[0,[],0,\"And yet without adult supervision this team had organically arrived at the following\"]]],[3,\"ul\",[[[0,[],0,\"Standups ✅\"]],[[0,[],0,\"Pair programming ✅\"]],[[0,[],0,\"Velocity measurement ✅\"]],[[0,[],0,\"Fast test cycles ✅\"]]]],[1,\"p\",[[0,[],0,\"Given time to refine their approach I am confident they would have introduced a second planning cadence at a weekly or fortnightly level and evolved a more sophisticated way to measure velocity.\"]]],[1,\"p\",[[0,[],0,\"Why then is Agile or SCRUM so joyless? Why does it feel like one mindless ritual after another, a process that needs someone with the title of “SCRUM Master” no less to administer? What’s the difference?\"]]],[1,\"h3\",[[0,[],0,\"the problem with Agile\"]]],[1,\"p\",[[0,[],0,\"The problem with agile, as with all processes, is that Agile does not exist in a vacuum. There is a context around Agile that was not written down in any of the textbooks. And it is this missing context that makes all the difference.\"]]],[1,\"p\",[[0,[],0,\"Observing this team made me realise what the missing ingredients were —\"]]],[1,\"h4\",[[0,[],0,\"desire.\"]]],[1,\"p\",[[0,[],0,\"The difference between this team and the other teams that endured SCRUM is that this team really really wanted to go faster. The goal they were chasing was meaningful to them. The cost of delay was clearly known and avoiding delays was goal number one in this team’s mind.\"]]],[1,\"h4\",[[0,[],0,\"autonomy\"]]],[1,\"p\",[[0,[],0,\"The team was free to choose their way of working and this made all the difference. There was a very clear ‘why’ behind every one of their decisions and every member of the team felt like they had a say in these decisions. Contrast this with the answer you get in the median org — we do this because we’ve always done this.\"]]],[1,\"h4\",[[0,[],0,\"attention\"]]],[1,\"p\",[[0,[],0,\"Because these rituals evolved organically and were tuned to the needs of the team, there were very few reasons to be ‘checked out’ during the standup. The process lost the feeling of being a ‘mindless ritual’ and became instead a source of critical inputs into the life of every member of the team.\"]]],[1,\"h3\",[[0,[],0,\"Rituals\"]]],[1,\"p\",[[0,[],0,\"Ever been to a pooja, say a \"],[0,[0],1,\"grahpravesh \"],[0,[],0,\"or \"],[0,[0],1,\"Satyanarayan Pooja\"],[0,[],0,\"? Do you see how the karta just does whatever the priest tells them to without paying attention? This is a misunderstanding of the ritual. \"],[0,[0],1,\"Pooja\"],[0,[],0,\" as a ritual was originally meant to guide the attention to where it was required. The actions being performed there are not the main thing. It is where your attention is that is most important.\"]]],[1,\"p\",[[0,[],0,\"It is the same with our work rituals. They are tools for guiding the attention, not a checklist of action items. When this essence is lost, the ritual becomes a dead ritual and it is time to replace it with something more alive, more vital and energising.\"]]],[1,\"h3\",[[0,[],0,\"The Marie Kondo approach to process design.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Without ‘joy’, all your processes are deadweight dragging on the attention and creativity of your teams. This mindless performance theater of ticking checklists and presenting burndown charts is not what Agile is about. Agile is about a focus on the goal and the desire to get to it as fast and smoothly as possible.\"]]],[1,\"p\",[[0,[],0,\"From time to time you have to do a Marie Kondo on your processes, throw out the things that do not spark joy, and allow the team the leeway to create their own process.\"]]],[1,\"h3\",[[0,[],0,\"Isn’t this dangerous?\"]]],[1,\"p\",[[0,[],0,\"It can be. After all the tires on the car or the carburettor hardly spark joy but you can’t really throw them away can you?\"]]],[1,\"p\",[[0,[],0,\"There are processes in place to avert disaster. These processes do important work without sparking joy. A deploy checklist, for example, doesn’t spark joy but what it does do is avoid misery. Which is also a good thing. So how does one know what to keep and what to throw away?\"]]],[1,\"p\",[[0,[],0,\"A factory has a different definition of joy than a home. What looks ugly to the factory visitor might be the source of deep joy to the worker who works on it every day. Help your team to find that spark of joy even in the ugly but useful things, help them recognise the coherence, the design and the intent behind the process. And who knows, some team might even turn these into joyful activities.\"]]],[1,\"h4\",[[0,[],0,\"what about standardisation?\"]]],[1,\"p\",[[0,[],0,\"What about it? Standardization of process is not as big a deal as you think it is. It’s perfectly fine to let teams design their own processes. When you want standardisation, it has to be as a response to a real problem faced, not an imaginary problem. When you face this problem, tell the teams that their processes are causing problems upstream or downstream and let the teams work together to solve those.\"]]],[1,\"p\",[[0,[],0,\"We’re ‘programming to interfaces, not implementations’ and ‘refactoring as we go’. You already know how to do this.\"]]],[1,\"h3\",[[0,[],0,\"to conclude\"]]],[1,\"p\",[[0,[],0,\"The most lasting sense of joy comes from ‘a job well done’. Focus on doing the job well. The joy will invariably follow.\"]]],[10,1]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"\u003cp\u003eOne time, I was on a team that had an impossible deadline. As the stress levels grew, the team realised that the normal way of working was not going to get them across the finish line in time. Actually the truth is it wasn’t just this one time. I have been on such teams quite a lot. The difference is in the way this team reacted.\u003c/p\u003e\u003cp\u003eThis team did something radical. It threw away the rulebook on everything and just started doing the things that would obviously make them go faster. They started keeping a really good track of what they’d already done and what was still left to do. They started convening twice a day to ensure people were not stuck, to align on the approach and to coordinate the next steps. People would work on problems together in order to go faster. QAs were deeply embedded in the teams and though there was little by way of automated testing, the feedback cycle from the tester was fast enough to make a real difference to velocity.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eDo you see what they did? The team had just invented Agile. Or better said, it re-invented Agile. Agile Programming itself was invented many years ago. So many years ago, in fact, that it had already completed its transition from “disruptive new methodology empowering teams” to “that damned process”. By the time this particular team found themselves in that age old predicament, Agile was firmly in the list of things that people endure because someone else tells them to.\u003c/p\u003e\u003cp\u003eAnd yet without adult supervision this team had organically arrived at the following\u003c/p\u003e\u003cul\u003e\u003cli\u003eStandups ✅\u003c/li\u003e\u003cli\u003ePair programming ✅\u003c/li\u003e\u003cli\u003eVelocity measurement ✅\u003c/li\u003e\u003cli\u003eFast test cycles ✅\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eGiven time to refine their approach I am confident they would have introduced a second planning cadence at a weekly or fortnightly level and evolved a more sophisticated way to measure velocity.\u003c/p\u003e\u003cp\u003eWhy then is Agile or SCRUM so joyless? Why does it feel like one mindless ritual after another, a process that needs someone with the title of “SCRUM Master” no less to administer? What’s the difference?\u003c/p\u003e\u003ch3 id=\"the-problem-with-agile\"\u003ethe problem with Agile\u003c/h3\u003e\u003cp\u003eThe problem with agile, as with all processes, is that Agile does not exist in a vacuum. There is a context around Agile that was not written down in any of the textbooks. And it is this missing context that makes all the difference.\u003c/p\u003e\u003cp\u003eObserving this team made me realise what the missing ingredients were —\u003c/p\u003e\u003ch4 id=\"desire-\"\u003edesire.\u003c/h4\u003e\u003cp\u003eThe difference between this team and the other teams that endured SCRUM is that this team really really wanted to go faster. The goal they were chasing was meaningful to them. The cost of delay was clearly known and avoiding delays was goal number one in this team’s mind.\u003c/p\u003e\u003ch4 id=\"autonomy\"\u003eautonomy\u003c/h4\u003e\u003cp\u003eThe team was free to choose their way of working and this made all the difference. There was a very clear ‘why’ behind every one of their decisions and every member of the team felt like they had a say in these decisions. Contrast this with the answer you get in the median org — we do this because we’ve always done this.\u003c/p\u003e\u003ch4 id=\"attention\"\u003eattention\u003c/h4\u003e\u003cp\u003eBecause these rituals evolved organically and were tuned to the needs of the team, there were very few reasons to be ‘checked out’ during the standup. The process lost the feeling of being a ‘mindless ritual’ and became instead a source of critical inputs into the life of every member of the team.\u003c/p\u003e\u003ch3 id=\"rituals\"\u003eRituals\u003c/h3\u003e\u003cp\u003eEver been to a pooja, say a \u003cem\u003egrahpravesh \u003c/em\u003eor \u003cem\u003eSatyanarayan Pooja\u003c/em\u003e? Do you see how the karta just does whatever the priest tells them to without paying attention? This is a misunderstanding of the ritual. \u003cem\u003ePooja\u003c/em\u003e as a ritual was originally meant to guide the attention to where it was required. The actions being performed there are not the main thing. It is where your attention is that is most important.\u003c/p\u003e\u003cp\u003eIt is the same with our work rituals. They are tools for guiding the attention, not a checklist of action items. When this essence is lost, the ritual becomes a dead ritual and it is time to replace it with something more alive, more vital and energising.\u003c/p\u003e\u003ch3 id=\"the-marie-kondo-approach-to-process-design-\"\u003eThe Marie Kondo approach to process design.\u003c/h3\u003e\u003cfigure class=\"kg-card kg-image-card\"\u003e\u003cimg src=\"__GHOST_URL__/content/images/public/images/ec1c641c-b93d-4189-b53d-293eb4539d1d_1600x1600.jpg\" class=\"kg-image\" alt=\"Marie Kondo Method: Spark Joy Book Tidying Wardrobe Method\" loading=\"lazy\" title=\"Marie Kondo Method: Spark Joy Book Tidying Wardrobe Method\"\u003e\u003c/figure\u003e\u003cp\u003eWithout ‘joy’, all your processes are deadweight dragging on the attention and creativity of your teams. This mindless performance theater of ticking checklists and presenting burndown charts is not what Agile is about. Agile is about a focus on the goal and the desire to get to it as fast and smoothly as possible.\u003c/p\u003e\u003cp\u003eFrom time to time you have to do a Marie Kondo on your processes, throw out the things that do not spark joy, and allow the team the leeway to create their own process.\u003c/p\u003e\u003ch3 id=\"isn-t-this-dangerous\"\u003eIsn’t this dangerous?\u003c/h3\u003e\u003cp\u003eIt can be. After all the tires on the car or the carburettor hardly spark joy but you can’t really throw them away can you?\u003c/p\u003e\u003cp\u003eThere are processes in place to avert disaster. These processes do important work without sparking joy. A deploy checklist, for example, doesn’t spark joy but what it does do is avoid misery. Which is also a good thing. So how does one know what to keep and what to throw away?\u003c/p\u003e\u003cp\u003eA factory has a different definition of joy than a home. What looks ugly to the factory visitor might be the source of deep joy to the worker who works on it every day. Help your team to find that spark of joy even in the ugly but useful things, help them recognise the coherence, the design and the intent behind the process. And who knows, some team might even turn these into joyful activities.\u003c/p\u003e\u003ch4 id=\"what-about-standardisation\"\u003ewhat about standardisation?\u003c/h4\u003e\u003cp\u003eWhat about it? Standardization of process is not as big a deal as you think it is. It’s perfectly fine to let teams design their own processes. When you want standardisation, it has to be as a response to a real problem faced, not an imaginary problem. When you face this problem, tell the teams that their processes are causing problems upstream or downstream and let the teams work together to solve those.\u003c/p\u003e\u003cp\u003eWe’re ‘programming to interfaces, not implementations’ and ‘refactoring as we go’. You already know how to do this.\u003c/p\u003e\u003ch3 id=\"to-conclude\"\u003eto conclude\u003c/h3\u003e\u003cp\u003eThe most lasting sense of joy comes from ‘a job well done’. Focus on doing the job well. The joy will invariably follow.\u003c/p\u003e\u003cdiv class=\"kg-card kg-button-card kg-align-center\"\u003e\u003ca href=\"#/portal/signup\" class=\"kg-btn kg-btn-accent\"\u003eSubscribe\u003c/a\u003e\u003c/div\u003e","comment_id":"638b65ed07bd7780dce71b3d","plaintext":"One time, I was on a team that had an impossible deadline. As the stress levels grew, the team realised that the normal way of working was not going to get them across the finish line in time. Actually the truth is it wasn’t just this one time. I have been on such teams quite a lot. The difference is in the way this team reacted.\n\nThis team did something radical. It threw away the rulebook on everything and just started doing the things that would obviously make them go faster. They started keeping a really good track of what they’d already done and what was still left to do. They started convening twice a day to ensure people were not stuck, to align on the approach and to coordinate the next steps. People would work on problems together in order to go faster. QAs were deeply embedded in the teams and though there was little by way of automated testing, the feedback cycle from the tester was fast enough to make a real difference to velocity.\n\n\n\nDo you see what they did? The team had just invented Agile. Or better said, it re-invented Agile. Agile Programming itself was invented many years ago. So many years ago, in fact, that it had already completed its transition from “disruptive new methodology empowering teams” to “that damned process”. By the time this particular team found themselves in that age old predicament, Agile was firmly in the list of things that people endure because someone else tells them to.\n\nAnd yet without adult supervision this team had organically arrived at the following\n\n * Standups ✅\n * Pair programming ✅\n * Velocity measurement ✅\n * Fast test cycles ✅\n\nGiven time to refine their approach I am confident they would have introduced a second planning cadence at a weekly or fortnightly level and evolved a more sophisticated way to measure velocity.\n\nWhy then is Agile or SCRUM so joyless? Why does it feel like one mindless ritual after another, a process that needs someone with the title of “SCRUM Master” no less to administer? What’s the difference?\n\n\nthe problem with Agile\n\nThe problem with agile, as with all processes, is that Agile does not exist in a vacuum. There is a context around Agile that was not written down in any of the textbooks. And it is this missing context that makes all the difference.\n\nObserving this team made me realise what the missing ingredients were —\n\ndesire.\n\nThe difference between this team and the other teams that endured SCRUM is that this team really really wanted to go faster. The goal they were chasing was meaningful to them. The cost of delay was clearly known and avoiding delays was goal number one in this team’s mind.\n\nautonomy\n\nThe team was free to choose their way of working and this made all the difference. There was a very clear ‘why’ behind every one of their decisions and every member of the team felt like they had a say in these decisions. Contrast this with the answer you get in the median org — we do this because we’ve always done this.\n\nattention\n\nBecause these rituals evolved organically and were tuned to the needs of the team, there were very few reasons to be ‘checked out’ during the standup. The process lost the feeling of being a ‘mindless ritual’ and became instead a source of critical inputs into the life of every member of the team.\n\n\nRituals\n\nEver been to a pooja, say a grahpravesh or Satyanarayan Pooja? Do you see how the karta just does whatever the priest tells them to without paying attention? This is a misunderstanding of the ritual. Pooja as a ritual was originally meant to guide the attention to where it was required. The actions being performed there are not the main thing. It is where your attention is that is most important.\n\nIt is the same with our work rituals. They are tools for guiding the attention, not a checklist of action items. When this essence is lost, the ritual becomes a dead ritual and it is time to replace it with something more alive, more vital and energising.\n\n\nThe Marie Kondo approach to process design.\n\nWithout ‘joy’, all your processes are deadweight dragging on the attention and creativity of your teams. This mindless performance theater of ticking checklists and presenting burndown charts is not what Agile is about. Agile is about a focus on the goal and the desire to get to it as fast and smoothly as possible.\n\nFrom time to time you have to do a Marie Kondo on your processes, throw out the things that do not spark joy, and allow the team the leeway to create their own process.\n\n\nIsn’t this dangerous?\n\nIt can be. After all the tires on the car or the carburettor hardly spark joy but you can’t really throw them away can you?\n\nThere are processes in place to avert disaster. These processes do important work without sparking joy. A deploy checklist, for example, doesn’t spark joy but what it does do is avoid misery. Which is also a good thing. So how does one know what to keep and what to throw away?\n\nA factory has a different definition of joy than a home. What looks ugly to the factory visitor might be the source of deep joy to the worker who works on it every day. Help your team to find that spark of joy even in the ugly but useful things, help them recognise the coherence, the design and the intent behind the process. And who knows, some team might even turn these into joyful activities.\n\nwhat about standardisation?\n\nWhat about it? Standardization of process is not as big a deal as you think it is. It’s perfectly fine to let teams design their own processes. When you want standardisation, it has to be as a response to a real problem faced, not an imaginary problem. When you face this problem, tell the teams that their processes are causing problems upstream or downstream and let the teams work together to solve those.\n\nWe’re ‘programming to interfaces, not implementations’ and ‘refactoring as we go’. You already know how to do this.\n\n\nto conclude\n\nThe most lasting sense of joy comes from ‘a job well done’. Focus on doing the job well. The joy will invariably follow.\n\nSubscribe","feature_image":"__GHOST_URL__/content/images/image/fetch/w_1200,h_600,c_limit,f_jpg,q_auto:good,fl_progressive:steep/https-3a-2f-2fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com-2fpublic-2fimages-2fec1c641c-b93d-4189-b53d-293eb4539d1d_1600x1600.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"members","email_recipient_filter":"all","created_at":"2022-11-21T10:09:39.000Z","updated_at":"2022-12-04T05:01:30.000Z","published_at":"2022-11-21T10:09:39.000Z","custom_excerpt":"Let's face it. SCRUM does not spark joy.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null}]}}]}